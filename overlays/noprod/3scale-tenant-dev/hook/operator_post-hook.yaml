apiVersion: batch/v1
kind: Job
metadata:
  name: post-sync-promote-products
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 3600
  template:
    spec:
      serviceAccountName: hook-sa
      containers:
        - name: promote-products
          image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          command:
            - /bin/bash
            - -c
            - |
              for i in {1..60}; do

                NOT_SYNCED=$(oc get products.capabilities.3scale.net -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.conditions[?(@.type=="Synced")].status}{"\n"}{end}' | awk '$2 != "True"')

                if ! [[ -z "$NOT_SYNCED" ]]; then
                  echo "[Intento $i] Products no están sincronizados aún. Esperando 30s..."
                  sleep 30
                  continue
                fi

                echo "[INFO] Iniciando promoción de Products en 3scale..."
                TENANT_SECRET="dev-tenant-secret"
                TOKEN=$(oc get secret ${TENANT_SECRET} -o jsonpath='{.data.token}' | base64 -d)
                ADMIN_URL=$(oc get secret ${TENANT_SECRET} -o jsonpath='{.data.adminURL}' | base64 -d)

                echo "[INFO] Descargando lista de Products..."
                curl -s -o /tmp/services.xml "${ADMIN_URL}/admin/api/services.xml?access_token=${TOKEN}&page=1&per_page=500"
                IDS=$(xmllint --xpath "//service/id/text()" /tmp/services.xml)

                echo ""
                echo "[INFO] Promoviendo configuración de APIcast al entorno de *staging*..."
                for ID in ${IDS}; do
                  echo "[INFO] Promoviendo Product ID *${ID}*"
                  curl -s -k -X POST "${ADMIN_URL}/admin/api/services/${ID}/proxy/deploy.xml" \
                    -H "Content-Type: application/x-www-form-urlencoded" \
                    -d "access_token=${TOKEN}" > /dev/null 2>&1
                done

                echo ""
                echo "[INFO] Promoviendo configuración de APIcast al entorno de *production*..."
                for ID in ${IDS}; do
                  curl -s -o /tmp/latest.json "${ADMIN_URL}/admin/api/services/${ID}/proxy/configs/sandbox/latest.json?access_token=${TOKEN}"
                  VERSION=$(grep '"version"' /tmp/latest.json | head -n1 | sed -E 's/.*"version":\s*([0-9]+).*/\1/')
                  echo "[INFO] Promoviendo Product ID *${ID}* a la versión *${VERSION}*"

                  curl -s -k -X POST "${ADMIN_URL}/admin/api/services/${ID}/proxy/configs/sandbox/${VERSION}/promote.json" \
                    -H "Content-Type: application/x-www-form-urlencoded" \
                    -d "access_token=${TOKEN}&to=production" > /dev/null 2>&1
                done

                exit 0
              done
              echo "Timeout esperando que Products estén sincronizados"
              exit 1

        - name: reconcile-application
          image: registry.redhat.io/ubi8/python-312:latest
          command: ["python", "/config/reconcile_apps.py"]
          volumeMounts:
            - name: config-volume
              mountPath: /config
              readOnly: true
            - name: apps-volume
              mountPath: /apps
              readOnly: true
          envFrom:
            - secretRef:
                name: dev-tenant-secret
      restartPolicy: Never
      volumes:
        - name: config-volume
          configMap:
            name: reconcile-script
        - name: apps-volume
          secret:
            secretName: reconcile-application-secret
